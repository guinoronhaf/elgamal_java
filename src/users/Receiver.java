package users;

import java.math.BigInteger;
import java.util.List;

import services.Message;
import services.Number;

/**
 * Represents a receiver of the message, which contains a prime number "p" and a private key "privk".
 * 
 * @author guinoronhaf
 * @author pedroleal02
 * @author pedronparaiso 
 */
public class Receiver {

    /**
     * Prime number that will be used to build the system.
     */
    private int p;

    /**
     * Receiver's private key, which is generated based on "p" and is user-only visible.
     */
    private int privk;

    /**
     * Object of the class Mesage, mainly used to decrypt the message once the code is obtained.
     */
    private Message msg;

    /**
     * Builds a receiver based on the prime number "p".
     * 
     * @param p a prime number
     * @throws IllegalArgumentException exception thrown wether a non-prime number is informed or wether a small prime number is informed.
     */
    public Receiver(int p) throws IllegalArgumentException {

        if (!(Number.isPrimeNumber(p))) {
            throw new IllegalArgumentException("Número informado não é primo.");
        }

        this.p = p;
        this.privk = Number.generateRandomNaturalNumber(p);
        this.msg = new Message();
    }

    /**
     * Generates receiver's public key (pubk) based on the prime numer "p", a primitive root module p "r" and
     * a randomly selected natural number "a".
     * 
     * @return receiver's public key.
     */
    public BigInteger[] generatePubk() {

        int r = Number.findPrimitiveRoot(p);

        if (r == -1) {
            throw new IllegalArgumentException("Número informado não possui raiz primitiva.");
        }

        BigInteger a = BigInteger.valueOf(r).modPow(BigInteger.valueOf(privk), BigInteger.valueOf(p));

        return new BigInteger[]{BigInteger.valueOf(p), BigInteger.valueOf(r), a};

    }

    /**
     * Decrypts the message using sender's cipher collection.
     * 
     * @param ciphers ciphers generated by sender.
     * @return decrypyed message.
     */
    public String unmaskMessage(List<BigInteger[]> ciphers) {

        String decMensagem = "";

        for (BigInteger[] cipher : ciphers) {

            BigInteger b = cipher[0], cezao = cipher[1];

            int pezao = ((cezao.multiply(b.pow(p - 1 - privk))).mod(BigInteger.valueOf(p))).intValue();

            String fPezao = Integer.toString(pezao);

            if (fPezao.length() < 2) {
                fPezao = "00" + fPezao;
            } else if (fPezao.length() < 3) {
                fPezao = "0" + fPezao;
            }

            decMensagem += fPezao;

        }

        return msg.decryptMessage(msg.formatMessage(decMensagem));

    }
    
}
